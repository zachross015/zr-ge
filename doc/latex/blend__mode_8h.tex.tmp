\hypertarget{blend__mode_8h}{}\doxysection{/home/zachary/\+Documents/\+Projects/game-\/engine/include/sdl\+\_\+wrapper/blend\+\_\+mode.h File Reference}
\label{blend__mode_8h}\index{/home/zachary/Documents/Projects/game-\/engine/include/sdl\_wrapper/blend\_mode.h@{/home/zachary/Documents/Projects/game-\/engine/include/sdl\_wrapper/blend\_mode.h}}
{\ttfamily \#include $<$SDL.\+h$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include $<$ostream$>$}\newline
Include dependency graph for blend\+\_\+mode.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Enumerations}
\begin{DoxyCompactItemize}
\item 
enum class \mbox{\hyperlink{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629}{zr\+::blend\+\_\+mode}} 
\begin{DoxyCompactList}\small\item\em An enumeration of blend modes used by the renderer and drawing operations. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
std\+::vector$<$ blend\+\_\+mode $>$ \mbox{\hyperlink{blend__mode_8h_a71c470a8e93a51d5fafefdc0fccdbd62}{zr\+::all\+\_\+blend\+\_\+modes}} ()
\begin{DoxyCompactList}\small\item\em Retrieves the list of all possible blend modes for enumeration purposes. \end{DoxyCompactList}\item 
std\+::ostream \& \mbox{\hyperlink{blend__mode_8h_ab62281d9eb3b09b434be07775ab80a99}{zr\+::operator$<$$<$}} (std\+::ostream \&out, const blend\+\_\+mode \&ws)
\begin{DoxyCompactList}\small\item\em Ostream operator overload for the render\+\_\+state enumerator. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
\begin{DoxyRefDesc}{Todo}
\item[\mbox{\hyperlink{todo__todo000003}{Todo}}]SDL\+\_\+\+Blend\+Mode is an actual class defined by a combination of custom blend mode quanities as defined in \href{https://wiki.libsdl.org/SDL_ComposeCustomBlendMode}{\texttt{ https\+://wiki.\+libsdl.\+org/\+SDL\+\_\+\+Compose\+Custom\+Blend\+Mode}}. The code should eventuall be extended to include enums for blend factos and blend operations, then the ability to return the custom blend mode from those. Until then, we\textquotesingle{}ll just do boiler plate. \end{DoxyRefDesc}


\doxysubsection{Enumeration Type Documentation}
\mbox{\Hypertarget{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629}\label{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629}} 
\index{blend\_mode.h@{blend\_mode.h}!blend\_mode@{blend\_mode}}
\index{blend\_mode@{blend\_mode}!blend\_mode.h@{blend\_mode.h}}
\doxysubsubsection{\texorpdfstring{blend\_mode}{blend\_mode}}
{\footnotesize\ttfamily enum class \mbox{\hyperlink{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629}{zr\+::blend\+\_\+mode}}\hspace{0.3cm}{\ttfamily [strong]}}



An enumeration of blend modes used by the renderer and drawing operations. 

Additional values may be obtained using SDL\+\_\+\+Compose\+Custom\+Blend\+Mode() \begin{DoxyRefDesc}{Todo}
\item[\mbox{\hyperlink{todo__todo000004}{Todo}}]Replace SDL\+\_\+\+Compose\+Custom\+Blend\+Mode lol \end{DoxyRefDesc}
\begin{DoxyEnumFields}{Enumerator}
\raisebox{\heightof{T}}[0pt][0pt]{\index{none@{none}!blend\_mode.h@{blend\_mode.h}}\index{blend\_mode.h@{blend\_mode.h}!none@{none}}}\mbox{\Hypertarget{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629a334c4a4c42fdb79d7ebc3e73b517e6f8}\label{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629a334c4a4c42fdb79d7ebc3e73b517e6f8}} 
none&No blending. \begin{DoxyVerb}   destinationRGBA = sourceRGBA
\end{DoxyVerb}
 \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{blend@{blend}!blend\_mode.h@{blend\_mode.h}}\index{blend\_mode.h@{blend\_mode.h}!blend@{blend}}}\mbox{\Hypertarget{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629ac195f144a8d768f2bb87f155ed2117a4}\label{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629ac195f144a8d768f2bb87f155ed2117a4}} 
blend&Alpha blending. \begin{DoxyVerb}   destinationRGB = (sourceRGB * sourceA) + (destinationRGB * (1 - sourceA)
   destinationA = sourceA + (destinationA * (1 - sourceA))
\end{DoxyVerb}
 \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{add@{add}!blend\_mode.h@{blend\_mode.h}}\index{blend\_mode.h@{blend\_mode.h}!add@{add}}}\mbox{\Hypertarget{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629a34ec78fcc91ffb1e54cd85e4a0924332}\label{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629a34ec78fcc91ffb1e54cd85e4a0924332}} 
add&Additive blending. \begin{DoxyVerb}   destinationRGB = (sourceRGB * sourceA) + destination RGB
   destinationA = destinationA
\end{DoxyVerb}
 \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{mod@{mod}!blend\_mode.h@{blend\_mode.h}}\index{blend\_mode.h@{blend\_mode.h}!mod@{mod}}}\mbox{\Hypertarget{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629aad148a3ca8bd0ef3b48c52454c493ec5}\label{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629aad148a3ca8bd0ef3b48c52454c493ec5}} 
mod&Color modulate. \begin{DoxyVerb}   destinationRB = sourceRGB * destinationRGB
   destinationA = destinationA
\end{DoxyVerb}
 \\
\hline

\end{DoxyEnumFields}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{blend__mode_8h_a71c470a8e93a51d5fafefdc0fccdbd62}\label{blend__mode_8h_a71c470a8e93a51d5fafefdc0fccdbd62}} 
\index{blend\_mode.h@{blend\_mode.h}!all\_blend\_modes@{all\_blend\_modes}}
\index{all\_blend\_modes@{all\_blend\_modes}!blend\_mode.h@{blend\_mode.h}}
\doxysubsubsection{\texorpdfstring{all\_blend\_modes()}{all\_blend\_modes()}}
{\footnotesize\ttfamily std\+::vector$<$ blend\+\_\+mode $>$ zr\+::all\+\_\+blend\+\_\+modes (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Retrieves the list of all possible blend modes for enumeration purposes. 

\begin{DoxyReturn}{Returns}
std\+::vector$<$blend\+\_\+mode$>$ consisting of all possible render states. 
\end{DoxyReturn}
\mbox{\Hypertarget{blend__mode_8h_ab62281d9eb3b09b434be07775ab80a99}\label{blend__mode_8h_ab62281d9eb3b09b434be07775ab80a99}} 
\index{blend\_mode.h@{blend\_mode.h}!operator$<$$<$@{operator$<$$<$}}
\index{operator$<$$<$@{operator$<$$<$}!blend\_mode.h@{blend\_mode.h}}
\doxysubsubsection{\texorpdfstring{operator$<$$<$()}{operator<<()}}
{\footnotesize\ttfamily std\+::ostream \& zr\+::operator$<$$<$ (\begin{DoxyParamCaption}\item[{std\+::ostream \&}]{out,  }\item[{const \mbox{\hyperlink{blend__mode_8h_a5f8dcdda70c99298ce87c3c463cdf629}{blend\+\_\+mode}} \&}]{ws }\end{DoxyParamCaption})}



Ostream operator overload for the render\+\_\+state enumerator. 


\begin{DoxyParams}{Parameters}
{\em out} & The ostream \\
\hline
{\em ws} & The render state to be printed out \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The outputted render state. 
\end{DoxyReturn}
